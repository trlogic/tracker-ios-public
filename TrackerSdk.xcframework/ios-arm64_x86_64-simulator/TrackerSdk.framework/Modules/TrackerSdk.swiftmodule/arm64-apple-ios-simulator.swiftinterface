// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name TrackerSdk
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CallKit
import SystemConfiguration.CaptiveNetwork
import Contacts
import CoreLocation
import CoreMotion
import CoreTelephony
import Darwin
import DeviceActivity
import Foundation
import MachO
import Network
import SensorKit
import Swift
import SystemConfiguration
@_exported import TrackerSdk
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import Darwin.sys.sysctl
@objc @_inheritsConvenienceInitializers public class LocationDataObtainer : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func getLocation() -> CoreLocation.CLLocationCoordinate2D?
  @objc deinit
}
extension TrackerSdk.LocationDataObtainer : CoreLocation.CLLocationManagerDelegate {
}
@objc @_inheritsConvenienceInitializers public class CallObserver : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum CallStatusType : Swift.String {
  case IDLE
  case RING
  case CALL
  case REJECT
  case END
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CallStatus {
  public var start: Foundation.Date?
  public var duration: Swift.Double?
  public var type: TrackerSdk.CallStatusType?
  public var isIncoming: Swift.Bool
}
extension TrackerSdk.CallObserver : CallKit.CXCallObserverDelegate {
  @objc dynamic public func callObserver(_ callObserver: CallKit.CXCallObserver, callChanged call: CallKit.CXCall)
}
public struct TrackerConfig : Swift.Decodable {
  public var name: Swift.String
  public var platform: Swift.String
  public var triggers: [TrackerSdk.TrackerTriggerConfig]
  public var variables: [TrackerSdk.TrackerVariableConfig]
  public var event: TrackerSdk.TrackerEventConfig
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrackerTriggerConfig : Swift.Decodable {
  public var name: Swift.String
  public var type: TrackerSdk.TriggerType
  public var filters: [TrackerSdk.TrackerFilter]
  public var description: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrackerFilter : Swift.Decodable {
  public var field: Swift.String
  public var `operator`: Swift.String
  public var value: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrackerVariableConfig : Swift.Decodable {
  public var name: Swift.String
  public var type: TrackerSdk.TrackerVariableType
  public var properties: TrackerSdk.TrackerProperties
  public var description: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrackerProperties : Swift.Decodable {
  public var dataType: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrackerEventConfig : Swift.Decodable {
  public var name: Swift.String
  public var keyMapping: Swift.String
  public var variableMappings: [Swift.String : Swift.String]
  public init(from decoder: any Swift.Decoder) throws
}
public enum TrackerVariableType : Swift.String, Swift.Decodable {
  case APP_LIST
  case APP_STATE
  case ARCH
  case BATTERY_LEVEL
  case BRIGHTNESS
  case CALL_DURATION
  case CALL_IS_INCOMING
  case CALL_NUMBER
  case CARRIER
  case CHARGING_TYPE
  case CONTACT_LIST
  case CURRENT_TRIGGER_NAME
  case CUSTOM_TRIGGER_ARGS
  case DEVICE_MODEL
  case ELAPSED_TIME
  case GYRO_X
  case GYRO_Y
  case GYRO_Z
  case IP_ADDRESS
  case IS_CHARGING
  case IS_CONTACT
  case IS_IN_CALL
  case IS_IN_VOIP_CALL
  case IS_PHONE
  case IS_ROOTED
  case IS_SIMULATOR
  case IS_TABLET
  case IS_VPN
  case LANGUAGE
  case LAST_KNOWN_LAT
  case LAST_KNOWN_LON
  case MAC_ADDRESS
  case NETWORK_TYPE
  case ORIENTATION
  case PLATFORM
  case RAM_SIZE
  case REACHABLE
  case REGION
  case RESOLUTION_HEIGHT
  case RESOLUTION_WIDTH
  case SCREEN_RECORD_DURATION
  case SCREEN_RECORD_STATUS
  case SCREEN_SHARE_DURATION
  case SCREEN_SHARE_STATUS
  case THEME_MODE
  case TILT_STATUS
  case TIME_ZONE
  case UNIQUE_DEVICE_ID
  case WIFI_SSID
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol EventListener {
  func initialize()
  func terminate()
}
@objc @_inheritsConvenienceInitializers public class NetworkDataObtainer : ObjectiveC.NSObject {
  public func getCarrier() -> Swift.String?
  public func getSSID() -> Swift.String?
  public func isVpn() -> Swift.Bool
  public func getIpAddress() -> Swift.String?
  public func getMacAddress() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public class TrackerEventQueue {
  public init(_ gateway: TrackerSdk.TransactionGateway)
  public func initialize()
  public func terminate()
  @objc deinit
}
public class TrackerContext {
  public static var shared: TrackerSdk.TrackerContext
  public init()
  public func initialize(apiKey: Swift.String, serviceUrl: Swift.String, tenant: Swift.String)
  public func setConfig(_ config: TrackerSdk.TrackerConfigResponse)
  public func getConfig() -> TrackerSdk.TrackerConfigResponse?
  public func getApiKey() -> Swift.String
  public func getServiceUrl() -> Swift.String
  public func getTenant() -> Swift.String
  public func getDeviceDataObtainer() -> TrackerSdk.DeviceDataObtainer
  public func getNetworkDataObtainer() -> TrackerSdk.NetworkDataObtainer
  public func getNetworkListener() -> TrackerSdk.NetworkObserver
  public func getTransactionGateway() -> TrackerSdk.TransactionGateway?
  public func getTransactionQueue() -> TrackerSdk.TrackerEventQueue?
  public func getJailbreakDataObtainer() -> TrackerSdk.JailbreakDataObtainer
  public func getDataStore() -> TrackerSdk.DataStore
  public func getLocationDataObtainer() -> TrackerSdk.LocationDataObtainer
  public func getMotionDataObtainer() -> TrackerSdk.MotionDataObtainer
  public func getContactDataObtainer() -> TrackerSdk.ContactDataObtainer
  public func setNativeCallback(_ callback: ((_ data: TrackerSdk.NativeTriggerData) -> Swift.Void)?)
  public func getNativeCallback() -> ((_ data: TrackerSdk.NativeTriggerData) -> Swift.Void)?
  public func cleanup()
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static let modelName: Swift.String
}
public class TrackerManager {
  public static let shared: TrackerSdk.TrackerManager
  public init()
  public var isInitialized: Swift.Bool {
    get
  }
  public func initialize(apiKey: Swift.String, serviceUrl: Swift.String, tenant: Swift.String, onReady: (() -> Swift.Void)?)
  public func terminate()
  public func getContext() -> TrackerSdk.TrackerContext
  public func triggerCustomEvent(name: Swift.String, args: [Swift.String : Any])
  public func triggerCustomEventSync(name: Swift.String, args: [Swift.String : Any], callback: @escaping TrackerSdk.ClientCallback<TrackerSdk.GenericResponse<TrackerSdk.TransactionSubmitResult>>, requestConfig: TrackerSdk.RequestConfig?)
  public func setUserDefinedValues(key: Swift.String, value: Any)
  public func getUserDefinedValues() -> [Swift.String : Any]?
  public func setNativeTriggerCallback(_ callback: @escaping (_ data: TrackerSdk.NativeTriggerData) -> Swift.Void)
  public func removeNativeTriggerCallback()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ContactDataObtainer {
  public func getContacts() -> [TrackerSdk.ContactData]
  @objc deinit
}
public struct ContactData : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public class ScreenShareListener : TrackerSdk.EventListener {
  public static let SHARE_DURATION_ARG_NAME: Swift.String
  public static let SHARE_STATUS_ARG_NAME: Swift.String
  public init(type: TrackerSdk.TriggerType, callback: @escaping (_ args: [Swift.String : Any]?) -> Swift.Void)
  public func initialize()
  public func terminate()
  @objc deinit
}
public class ApplicationOpenListener : TrackerSdk.EventListener {
  public init(type: TrackerSdk.TriggerType, callback: @escaping (_ args: [Swift.String : Any]?) -> Swift.Void)
  public func initialize()
  public func terminate()
  @objc deinit
}
public struct TrackerEventPayload : Swift.Codable {
  public let name: Swift.String
  public let key: Swift.String
  public let variables: [Swift.String : Any]
  public init(from decoder: any Swift.Decoder) throws
  public init(name: Swift.String, key: Swift.String, variables: [Swift.String : Any])
  public func encode(to encoder: any Swift.Encoder) throws
}
public class TransactionMapper {
  public init(context: TrackerSdk.TrackerContext, config: TrackerSdk.TrackerConfig)
  public func execute(_ config: TrackerSdk.TrackerTriggerConfig, _ args: [Swift.String : Any]?) -> TrackerSdk.TrackerEventPayload?
  @objc deinit
}
public enum TriggerType : Swift.String, Swift.Decodable {
  case APPLICATION_OPEN
  case APP_CALL_APPROVE
  case APP_CALL_END
  case APP_CALL_REJECT
  case APP_CALL_RING
  case APP_STATE_CHANGE
  case CHARGING_STATE_CHANGE
  case CUSTOM
  case NETWORK_CHANGE
  case SCREEN_RECORD_END
  case SCREEN_RECORD_START
  case SCREEN_SHARE_END
  case SCREEN_SHARE_START
  case THEME_CHANGE
  case VOIP_CALL_END
  case VOIP_CALL_START
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class NetworkChangeListener : TrackerSdk.EventListener {
  public init(type: TrackerSdk.TriggerType, callback: @escaping (_ args: [Swift.String : Any]?) -> Swift.Void)
  public func initialize()
  public func terminate()
  @objc deinit
}
public class CallListener : TrackerSdk.EventListener {
  public init(type: TrackerSdk.TriggerType, callback: @escaping (_ args: [Swift.String : Any]?) -> Swift.Void)
  public func initialize()
  public func terminate()
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (TrackerSdk.Reachability) -> ()
  public typealias NetworkUnreachable = (TrackerSdk.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: TrackerSdk.Reachability.NetworkStatus, b: TrackerSdk.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: TrackerSdk.Reachability.Connection
    public static func == (a: TrackerSdk.Reachability.Connection, b: TrackerSdk.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: TrackerSdk.Reachability.NetworkReachable?
  public var whenUnreachable: TrackerSdk.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: TrackerSdk.Reachability.Connection {
    get
  }
  public var connection: TrackerSdk.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension TrackerSdk.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public class RequestConfig {
  public init(timeout: Swift.Int)
  public func getTimeoutInSecond() -> Swift.Double
  @objc deinit
}
public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct TrackerConfigResponse : Swift.Decodable {
  public var configs: [TrackerSdk.TrackerConfig]
  public var transactionApiUrl: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public class NetworkObserver {
  public init()
  public func isReachable() -> Swift.Bool
  public func getConnectionType() -> Swift.String?
  public func terminate()
  @objc deinit
}
public class NativeTriggerData {
  public init(type: TrackerSdk.TriggerType, args: [Swift.String : Any])
  public func getType() -> TrackerSdk.TriggerType
  public func getArgs() -> [Swift.String : Any]
  @objc deinit
}
public class DeviceDataObtainer {
  public init()
  public func getDeviceModel() -> Swift.String
  public func getSystemVersion() -> Swift.String
  public func getOriontation() -> Swift.String?
  public func getBatteryLevel() -> Swift.Float
  public func isSimulator() -> Swift.Bool
  public func getArch() -> Swift.String?
  public func getMemory() -> Swift.Double
  public func getBrightness() -> Swift.Float
  public func getResolutionWidth() -> Swift.Double
  public func getResolutionHeight() -> Swift.Double
  public func isPhone() -> Swift.Bool
  public func isIpad() -> Swift.Bool
  public func getInstalledFonts() -> [Swift.String]
  public func getLanguage() -> Swift.String
  public func getRegion() -> Swift.String?
  public func getTimeZone() -> Swift.String?
  public func getCurrentScreenTime() -> Swift.Double
  public func getDeviceId() -> Swift.String?
  public func getScreenShareStatus() -> Swift.String
  public func isInCall() -> Swift.Bool
  public func getThemeMode() -> Swift.String
  public func isCharging() -> Swift.Bool
  public func getChargingType() -> Swift.String
  @objc deinit
}
public struct GenericResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public var requestId: Swift.String
  public var timestamp: Swift.UInt64
  public var success: Swift.Bool
  public var data: T
  public var error: TrackerSdk.ErrorResponse?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransactionSubmitResult : Swift.Codable {
  public var id: Swift.String
  public var fraud: TrackerSdk.TransactionRiskDetail
  public var compliance: TrackerSdk.TransactionRiskDetail
  public var failures: [TrackerSdk.Failure]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransactionRiskDetail : Swift.Codable {
  public var resolution: TrackerSdk.TransactionResolution
  public var score: Swift.Int
  public var rules: [TrackerSdk.RuleResult]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TransactionResolution : Swift.String, Swift.Codable {
  case APPROVED
  case ESCALATED
  case DECLINED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RuleResult : Swift.Codable {
  public var name: Swift.String
  public var resolution: TrackerSdk.TransactionResolution
  public var score: Swift.Int
  public var attachments: [Swift.String : TrackerSdk.AnyCodable]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Failure : Swift.Codable {
  public var type: TrackerSdk.ComponentType
  public var name: Swift.String
  public var code: Swift.Int
  public var description: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ComponentType : Swift.String, Swift.Codable {
  case VELOCITY
  case LIST
  case QUERY
  case BASIC
  case API
  case RULE
  case STORE
  case PREDICTION
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ErrorResponse : Swift.Codable {
  public var code: Swift.Int
  public var message: Swift.String
  public var attachments: [Swift.String : Swift.String]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Check_Method_Of_JailBreak : AnyObject {
  func sendTheStatusOfJailBreak(value: Swift.Bool)
}
public enum TypeOfJailBreakCheckAPI {
  case readAndWriteFiles, systemCalls
  public mutating func assignJailBreakCheckType(type: TrackerSdk.TypeOfJailBreakCheckAPI)
  public static func == (a: TrackerSdk.TypeOfJailBreakCheckAPI, b: TrackerSdk.TypeOfJailBreakCheckAPI) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TrackerSdk.Check_Method_Of_JailBreak {
  public func assignJailBreakCheckType(type: TrackerSdk.TypeOfJailBreakCheckAPI)
  public func canEditSandboxFilesForJailBreakDetection() -> Swift.Bool
  public func isJailBrokenFilesPresentInTheDirectory() -> Swift.Bool
  public func systemForkCall() -> Swift.Bool
}
public class JailbreakDataObtainer : TrackerSdk.Check_Method_Of_JailBreak {
  public init()
  public func sendTheStatusOfJailBreak(value: Swift.Bool)
  public func isRooted() -> Swift.Bool
  @objc deinit
}
public class ScreenRecordListener : TrackerSdk.EventListener {
  public static let IS_RECORDED_ARG_NAME: Swift.String
  public static let RECORD_DURATION_ARG_NAME: Swift.String
  public init(type: TrackerSdk.TriggerType, callback: @escaping (_ args: [Swift.String : Any]?) -> Swift.Void)
  public func initialize()
  public func terminate()
  @objc deinit
}
public class TransactionGateway {
  public init(trackerContext: TrackerSdk.TrackerContext, urlSession: Foundation.URLSession? = nil)
  public func send(_ transaction: TrackerSdk.TrackerEventPayload, _ callback: TrackerSdk.ClientCallback<TrackerSdk.GenericResponse<TrackerSdk.TransactionSubmitResult>>?, _ config: TrackerSdk.RequestConfig?)
  @objc deinit
}
public class ThemeChangeListener : TrackerSdk.EventListener {
  public init(callback: @escaping (_ args: [Swift.String : Any]?) -> Swift.Void)
  public func initialize()
  public func terminate()
  @objc deinit
}
public class MotionDataObtainer {
  public init()
  @objc deinit
}
public enum TiltStatus : Swift.String {
  case VERTICAL
  case HORIZONTAL
  case UNKNOWN
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class DataStore {
  public func getApplicationStartElapsedTime() -> Swift.Double
  public func resetCurrentTimer()
  public func getCurrentElapsedTime() -> Swift.Double
  public func setTiltStatus(status: TrackerSdk.TiltStatus)
  public func getTiltStatus() -> TrackerSdk.TiltStatus
  public func getAppState() -> Swift.String
  public func setAppState(_ appState: Swift.String)
  public func getGyro() -> CoreMotion.CMGyroData?
  public func setGyro(_ gyro: CoreMotion.CMGyroData?)
  public func getAcceleration() -> CoreMotion.CMAcceleration?
  public func setAcceleration(_ acceleration: CoreMotion.CMAcceleration)
  public func getUserDefinedValues() -> [Swift.String : Any]
  public func setUserDefinedValues(key: Swift.String, value: Any)
  @objc deinit
}
public class ChargingStateChangeListener : TrackerSdk.EventListener {
  public init(callback: @escaping (_ args: [Swift.String : Any]?) -> Swift.Void)
  public func initialize()
  public func terminate()
  @objc deinit
}
public typealias ClientCallback<T> = (_ value: Swift.Result<T, any Swift.Error>) -> Swift.Void
public typealias InternalClientCallback<T> = (_ value: T) -> Swift.Void
public class TriggerListener : TrackerSdk.EventListener {
  public init(context: TrackerSdk.TrackerContext)
  public func initialize()
  public func afterInitialize()
  public func trigger(_ type: TrackerSdk.TriggerType, _ args: [Swift.String : Any]?)
  public func triggerCustom(name: Swift.String, args: [Swift.String : Any])
  public func triggerCustomSync(name: Swift.String, args: [Swift.String : Any], callback: @escaping TrackerSdk.ClientCallback<TrackerSdk.GenericResponse<TrackerSdk.TransactionSubmitResult>>, config: TrackerSdk.RequestConfig?)
  public func terminate()
  @objc deinit
}
public class AppStateChangeListener : TrackerSdk.EventListener {
  public init(callback: @escaping (_ args: [Swift.String : Any]?) -> Swift.Void)
  public func initialize()
  public func terminate()
  @objc deinit
}
extension TrackerSdk.CallStatusType : Swift.Equatable {}
extension TrackerSdk.CallStatusType : Swift.Hashable {}
extension TrackerSdk.CallStatusType : Swift.RawRepresentable {}
extension TrackerSdk.TrackerVariableType : Swift.Equatable {}
extension TrackerSdk.TrackerVariableType : Swift.Hashable {}
extension TrackerSdk.TrackerVariableType : Swift.RawRepresentable {}
extension TrackerSdk.TriggerType : Swift.Equatable {}
extension TrackerSdk.TriggerType : Swift.Hashable {}
extension TrackerSdk.TriggerType : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension TrackerSdk.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension TrackerSdk.Reachability.NetworkStatus : Swift.Hashable {}
extension TrackerSdk.Reachability.Connection : Swift.Equatable {}
extension TrackerSdk.Reachability.Connection : Swift.Hashable {}
extension TrackerSdk.TransactionResolution : Swift.Equatable {}
extension TrackerSdk.TransactionResolution : Swift.Hashable {}
extension TrackerSdk.TransactionResolution : Swift.RawRepresentable {}
extension TrackerSdk.ComponentType : Swift.Equatable {}
extension TrackerSdk.ComponentType : Swift.Hashable {}
extension TrackerSdk.ComponentType : Swift.RawRepresentable {}
extension TrackerSdk.TypeOfJailBreakCheckAPI : Swift.Equatable {}
extension TrackerSdk.TypeOfJailBreakCheckAPI : Swift.Hashable {}
extension TrackerSdk.TiltStatus : Swift.Equatable {}
extension TrackerSdk.TiltStatus : Swift.Hashable {}
extension TrackerSdk.TiltStatus : Swift.RawRepresentable {}
